"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","btford.socket-io","cgNotify"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("comments"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("profiles"),ApplicationConfiguration.registerModule("recipes"),ApplicationConfiguration.registerModule("users"),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("comments").config(["$stateProvider",function($stateProvider){$stateProvider.state("listComments",{url:"/comments",templateUrl:"modules/comments/views/list-comments.client.view.html"}).state("createComment",{url:"/comments/create",templateUrl:"modules/comments/views/create-comment.client.view.html"}).state("viewComment",{url:"/comments/:commentId",templateUrl:"modules/comments/views/view-comment.client.view.html"}).state("editComment",{url:"/comments/:commentId/edit",templateUrl:"modules/comments/views/edit-comment.client.view.html"})}]),angular.module("comments").controller("CommentsController",["$scope","$stateParams","$location","Authentication","Comments","Socket",function($scope,$stateParams,$location,Authentication,Comments,Socket){$scope.authentication=Authentication,$scope.create=function(){var comment=new Comments({commentbody:this.commentbody,recipe:this.recipeId});comment.$save(function(response){$location.path("recipes/"+recipe._id)},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.$apply(),this.commentbody="",$scope.comments=Comments.query()},$scope.remove=function(comment){var recipeId=this.recipe._id;if(comment){comment.$remove();for(var i in $scope.comments)$scope.comments[i]===comment&&$scope.comments.splice(i,1)}else $scope.comment.$remove(function(){$location.path("recipes/"+recipeId)})},$scope.update=function(){var comment=$scope.comment;comment.$update(function(){$location.path("comments/"+comment._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.comments=Comments.query()},$scope.findByrecipeId=function(){$scope.comments=Comments.get({recipe:this.recipeId})},$scope.findOne=function(){$scope.comment=Comments.get({commentId:$stateParams.commentId})}}]),angular.module("comments").factory("Comments",["$resource",function($resource){return $resource("comments/:commentId",{commentId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$stateParams","$http","$location","Authentication","Recipes",function($scope,$stateParams,$http,$location,Authentication,Recipes){$scope.authentication=Authentication,$scope.find=function(){$scope.recipes=Recipes.query().sort({viewCount:-1})},$scope.findOne=function(){console.log("Finding one:"+$stateParams.recipeId),$scope.recipe=Recipes.get({recipeId:$stateParams.recipeId},function(){console.log("Recipe found");var user=$scope.authentication.user,containsValue=!1;console.log("ID "+$scope.authentication.user._id),$scope.likes=$scope.recipe.likes.length;for(var i=0;i<$scope.recipe.likes.length;i++)console.log("Comparing "+$scope.recipe.likes[i]+" to "+user._id+" is "+($scope.recipe.likes[i]===user._id).toString()),$scope.recipe.likes[i]===user._id&&(containsValue=!0);$scope.isLiked=containsValue})}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("http://localhost:3000")})}]),angular.module("profiles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Profiles","profiles","dropdown","/profiles(/create)?"),Menus.addSubMenuItem("topbar","profiles","List Profiles","profiles")}]),angular.module("profiles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProfiles",{url:"/profiles",templateUrl:"modules/profiles/views/list-profiles.client.view.html"}).state("createProfile",{url:"/profiles/create",templateUrl:"modules/profiles/views/create-profile.client.view.html"}).state("viewProfile",{url:"/profiles/:profileId",templateUrl:"modules/profiles/views/view-profile.client.view.html"}).state("editProfile",{url:"/profiles/:profileId/edit",templateUrl:"modules/profiles/views/edit-profile.client.view.html"})}]),angular.module("profiles").controller("ProfilesController",["$scope","$stateParams","$location","Authentication","Profiles",function($scope,$stateParams,$location,Authentication,Profiles){$scope.authentication=Authentication,$scope.create=function(){var profile=new Profiles({name:this.name});profile.$save(function(response){$location.path("profiles/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(profile){if(profile){profile.$remove();for(var i in $scope.profiles)$scope.profiles[i]===profile&&$scope.profiles.splice(i,1)}else $scope.profile.$remove(function(){$location.path("profiles")})},$scope.update=function(){var profile=$scope.profile;profile.$update(function(){$location.path("profiles/"+profile._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.profiles=Profiles.query()},$scope.findOne=function(){$scope.profile=Profiles.get({profileId:$stateParams.profileId})}}]),angular.module("profiles").factory("Profiles",["$resource",function($resource){return $resource("profiles/:profileId",{profileId:"@_id"},{update:{method:"PUT"}})}]),angular.module("recipes").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Recipes","recipes","dropdown","/recipes(/create)?"),Menus.addSubMenuItem("topbar","recipes","List Recipes","recipes"),Menus.addSubMenuItem("topbar","recipes","New Recipe","recipes/create")}]),angular.module("recipes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRecipes",{url:"/recipes",templateUrl:"modules/recipes/views/list-recipes.client.view.html"}).state("createRecipe",{url:"/recipes/create",templateUrl:"modules/recipes/views/create-recipe.client.view.html"}).state("viewRecipe",{url:"/recipes/:recipeId",templateUrl:"modules/recipes/views/view-recipe.client.view.html"}).state("editRecipe",{url:"/recipes/:recipeId/edit",templateUrl:"modules/recipes/views/edit-recipe.client.view.html"})}]),angular.module("recipes").controller("RecipesController",["$scope","$stateParams","$http","$location","Authentication","Recipes","Socket",function($scope,$stateParams,$http,$location,Authentication,Recipes,Socket){$scope.authentication=Authentication,$scope.likes=0,$scope.isLiked=!1,$scope.create=function(){var recipe=new Recipes({name:this.name,notes:this.content});recipe.$save(function(response){$location.path("recipes/"+response._id),$scope.name="",$scope.content="",$scope.image=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(recipe){if(recipe){recipe.$remove();for(var i in $scope.recipes)$scope.recipes[i]===recipe&&$scope.recipes.splice(i,1)}else $scope.recipe.$remove(function(){$location.path("recipes")})},$scope.update=function(){var recipe=$scope.recipe;recipe.$update(function(){$location.path("recipes/"+recipe._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.recipes=Recipes.query()},$scope.homeFind=function(){$scope.recipes=Recipes.query()},$scope.findOne=function(){console.log("Finding one:"+$stateParams.recipeId),$scope.recipe=Recipes.get({recipeId:$stateParams.recipeId},function(){console.log("Recipe found");var user=$scope.authentication.user,containsValue=!1;console.log("ID "+$scope.authentication.user._id),$scope.likes=$scope.recipe.likes.length;for(var i=0;i<$scope.recipe.likes.length;i++)console.log("Comparing "+$scope.recipe.likes[i]+" to "+user._id+" is "+($scope.recipe.likes[i]===user._id).toString()),$scope.recipe.likes[i]===user._id&&(containsValue=!0);$scope.isLiked=containsValue})},$scope.likeThis=function(){var recipe=$scope.recipe;$http.put("recipes/like/"+recipe._id).success(function(){recipe.likes.push($scope.authentication.user._id),$scope.recipe.score++,$scope.isLiked=!0})},$scope.dislikeThis=function(){var recipe=$scope.recipe;$http.put("recipes/dislike/"+recipe._id).success(function(){recipe.likes.push($scope.authentication.user._id),$scope.recipe.score--,$scope.isLiked=!0})},Socket.on("recipe.created",function(recipe){console.log(recipe),console.log(recipe.name)})}]),angular.module("recipes").factory("Recipes",["$resource",function($resource){return $resource("recipes/:recipeId",{recipeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);